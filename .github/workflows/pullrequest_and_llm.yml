name: LLM Service Analysis

on:
  pull_request:
    branches: [main, develop,debug]
    types: [opened, reopened, synchronize]


jobs:
  analyze_service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Pull Request Body
        id: pr_body
        run: |
          BODY=$(cat $GITHUB_EVENT_PATH | jq -r '.pull_request.body')
        if [ -z "$BODY" ]; then
          echo "Pull request body is empty. Exiting."
          exit 1
        fi
          echo "BODY=$BODY" >> $GITHUB_ENV # 環境変数として設定

      - name: Extract Service Info from Body
        id: extract_info
        run: |
          SERVICE_NAME=$(echo "$BODY" | grep -oP 'name:\s*\K(.*)')
          SERVICE_URL=$(echo "$BODY" | grep -oP 'url:\s*\K(.*)')
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Fetch URL Content
        id: fetch_url
        uses: actions/github-script@v6
        with:
          script: |
            const serviceUrl = core.getInput('service_url', { required: true });
            try {
              const response = await fetch(serviceUrl);
              if (!response.ok) {
                throw new Error(\`HTTP error! status: ${response.status}\`);
              }
              const textContent = await response.text();
              core.setOutput('url_content', textContent);
            } catch (error) {
              core.setFailed(\`Failed to fetch URL: ${error.message}\`);
              core.setOutput('url_content', 'URL fetch failed.');
            }
          service_url: ${{ steps.extract_info.outputs.service_url }}

      - name: Analyze with LLM
        id: llm_analyze
        uses: actions/github-script@v6
        env:
          GEMINI_API_KEY: ${{ secrets.gemini }}
        with:
          script: |
            const serviceName = core.getInput('service_name', { required: true });
            const serviceUrl = core.getInput('service_url', { required: true });
            const urlContent = core.getOutput('url_content');

            if (urlContent === 'URL fetch failed.') {
              console.log('URL fetch failed, skipping LLM analysis.');
              core.setOutput('approach_score', 'N/A (URL fetch failed)');
              core.setOutput('target_score', 'N/A (URL fetch failed)');
              core.setOutput('description', 'N/A (URL fetch failed)');
              core.setOutput('category', 'N/A (URL fetch failed)');
            } else {

              async function analyzeService(name, url, content) {
                const geminiApiKey = process.env.GEMINI_API_KEY;
                const geminiApiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=' + geminiApiKey;

                const prompt = \`
                  サービス名: \${name}
                  URL: \${url}
                  URL内容: \${content}

                  上記サービスについて、以下の4つの項目を評価してください。

                  1. アプローチ: 医療従事者の補助・負担軽減 (0点)  - 医療従事者の代替 (100点) の間で、このサービスはどちらの傾向が強いか0-100点で定量的に評価してください。
                  2. ターゲット範囲: マス (0点) - ニッチ (100点) の間で、このサービスのターゲット範囲はどちらの傾向が強いか0-100点で定量的に評価してください。
                  3. 説明文: このサービスを説明する文章を日本語で作成してください（200字程度）。
                  4. カテゴリー分類: このサービスを以下のカテゴリーの中から最も適切なものを選択してください。カテゴリーは複数選択せず、最も適切なものを一つだけ選択してください。\n "カルテシステム","オンライン診療","画像解析、臨床意思決定システム","病院経営、運営管理システム","医薬品管理システム","オンライン診療","健康管理システム","フィットネス・ウェルネスアプリ","ゲノム医療・個別化医療支援システム","地域医療連携ネットワーク","感染症サーベイランス・公衆衛生情報システム","その他"

                  回答フォーマットは以下のようにJSON形式で記述してください。
                  {
                    "approach_score": (0-100の整数値),
                    "target_score": (0-100の整数値),
                    "description": "(説明文)",
                    "category": "(カテゴリー名)"
                  }
                \`;

                const requestBody = {
                  contents: [{
                    parts: [{ text: prompt }]
                  }]
                };
                
                try {
                  const response = await fetch(geminiApiUrl, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestBody),
                  });

                  if (!response.ok) {
                    throw new Error(\`HTTP error! status: ${response.status}\`);
                  }

                  const responseData = await response.json();
                  // Gemini API のレスポンス構造からテキスト部分を抽出 (レスポンス構造は要確認)
                  const responseText = responseData.candidates[0].content.parts[0].text;

                   // JSON 形式のテキストをパース
                  const analysisResult = JSON.parse(responseText);
                  return analysisResult;


                } catch (error) {
                  console.error("Gemini API error:", error);
                  return {
                    approach_score: 'APIエラー',
                    target_score: 'APIエラー',
                    description: 'APIエラー',
                    category: 'APIエラー'
                  };
                }
              }

              const analysis = await analyzeService(serviceName, serviceUrl, urlContent);

              core.setOutput('approach_score', analysis.approach_score);
              core.setOutput('target_score', analysis.target_score);
              core.setOutput('description', analysis.description);
              core.setOutput('category', analysis.category);
            }
          service_name: ${{ steps.extract_info.outputs.service_name }}
          service_url: ${{ steps.extract_info.outputs.service_url }}

      - name: Output Analysis Results
        id: output_results
        run: |
          echo "## LLM Service Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "- **name**: ${{ steps.extract_info.outputs.service_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **url**: ${{ steps.extract_info.outputs.service_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 評価結果" >> $GITHUB_STEP_SUMMARY
          echo "- **アプローチ (医療従事者の補助・負担軽減 ↔ 代替)**: ${{ steps.llm_analyze.outputs.approach_score }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ターゲット範囲 (マス ↔ ニッチ)**: ${{ steps.llm_analyze.outputs.target_score }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 説明文" >> $GITHUB_STEP_SUMMARY
          echo "> ${{ steps.llm_analyze.outputs.description }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### カテゴリー" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ steps.llm_analyze.outputs.category }}" >> $GITHUB_STEP_SUMMARY
